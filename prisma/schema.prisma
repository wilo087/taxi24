// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String
  Vehicle Vehicle[]

  @@map("brands")
}

model Company {
  id        Int       @id @default(autoincrement())
  name      String
  RNC       Int
  status    String
  address   String?
  drivers   Driver[]
  vehicles  Vehicle[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("companies")
}

model Passenger {
  id           Int     @id @default(autoincrement())
  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  email        String
  phone        String?
  document     String
  documentType String  @map("document_type")
  Trips        Trip[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @updatedAt @map("deleted_at")

  @@map("passengers")
}

model Driver {
  id           Int          @id @default(autoincrement())
  firstName    String       @map("first_name")
  lastName     String       @map("last_name")
  email        String
  phone        String
  companyId    Int          @map("company_id")
  document     String
  documentType String       @map("document_type")
  picture      String?
  current_lat  Float?
  current_log  Float?
  status       DriverStatus

  company Company   @relation(fields: [companyId], references: [id])
  trips   Trip[]
  Vehicle Vehicle[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("drivers")
}

model Trip {
  id             Int         @id @default(autoincrement())
  driverId       Int         @map("driver_id")
  passenger_id   Int
  status         TripsStatus
  from_latitude  Float
  from_longitude Float
  to_latitude    Float
  to_longitude   Float
  createdAt      DateTime    @default(now()) @map("created_at")
  started_at     DateTime?   @map("started_at")
  ended_at       DateTime?   @map("ended_at")

  Invoice     Invoice?
  Passenger   Passenger @relation(fields: [passengerId], references: [id])
  passengerId Int
  Driver      Driver    @relation(fields: [driverId], references: [id])

  @@map("trips")
}

model Vehicle {
  id        Int    @id @default(autoincrement())
  companyId Int    @map("company_id")
  driverId  Int    @map("driver_id")
  color     String
  brandId   Int    @map("brand_id")
  vin       String
  year      Int

  company Company? @relation(fields: [companyId], references: [id])
  driver  Driver   @relation(fields: [driverId], references: [id])
  brand   Brand    @relation(fields: [brandId], references: [id])

  @@map("vehicles")
}

model Invoice {
  id             Int      @id @default(autoincrement())
  trip_id        Int      @unique
  amount         Float?
  status         String?
  payment_method String?
  createdAt      DateTime @default(now()) @map("created_at")

  trip Trip @relation(fields: [trip_id], references: [id])

  @@map("invoices")
}

enum TripsStatus {
  STARTED
  IN_PROGRESS
  COMPLETED
}

enum DriverStatus {
  PENDING
  ACTIVE
  INACTIVE
  ONLINE
  BUSY
}
